[config]
root = ~/model/yolo2-pytorch

[image]
size = 416 416

[cache]
name = cache
category = config/category/20
# voc coco
datasets = cache.voc.cache cache.coco.cache
shuffle = 1

[model]
name = model
anchors = config/anchors/voc.tsv
; model.yolo2.Darknet
; model.yolo2.Tiny
; model.resnet.resnet18
; model.inception3.Inception3
; model.inception4.Inception4
; model.mobilenet.MobileNet
; model.densenet.densenet121
dnn = model.yolo2.Tiny
threshold = 0.6

[data]
workers = 5
sizes = 320,320 352,352 384,384 416,416 448,448 480,480 512,512 544,544 576,576 608,608
maintain = 10
shuffle = 0

[transform]
; transform.augmentation.RandomRotate transform.augmentation.RandomFlipHorizontally
augmentation = transform.augmentation.RandomRotate transform.augmentation.RandomFlipHorizontally
resize_train = transform.resize.label.RandomCrop
resize_eval = transform.resize.label.Naive
resize_test = transform.resize.image.Naive
; transform.image.RandomBlur transform.image.BGR2HSV transform.image.RandomHue transform.image.RandomSaturation transform.image.RandomBrightness transform.image.HSV2RGB transform.image.RandomGamma
image_train = transform.image.BGR2RGB
image_test = transform.image.BGR2RGB
; torchvision.transforms.ToTensor transform.image.Normalize
tensor = torchvision.transforms.ToTensor transform.image.Normalize
normalize = 0.5 1

[augmentation]
random_rotate = -5 5
random_flip_horizontally = 0.5
random_crop = 1
random_blur = 5 5
random_hue = 0 25
random_saturation = 0.5 1.5
random_brightness = 0.5 1.5
random_gamma = 0.9 1.5

[train]
; lambda params, lr: torch.optim.SGD(params, lr, weight_decay=1e-5, momentum=2)
; lambda params, lr: torch.optim.Adam(params, lr, weight_decay=1e-5, betas=(0.9, 0.999), eps=1e-8)
; lambda params, lr: torch.optim.RMSprop(params, lr, weight_decay=1e-5, alpha=0.99, eps=1e-8)
optimizer = lambda params, lr: torch.optim.Adam(params, lr, weight_decay=1e-5, betas=(0.9, 0.999), eps=1e-8)
scheduler = lambda optimizer: torch.optim.lr_scheduler.StepLR(optimizer, step_size=30, gamma=0.1)
phase = train val
cross_entropy = 1
clip_ = 5

[save]
secs = 600
keep = 5

[summary_secs]
scalar = 10
image = 60
histogram_ = 60

[summary_scalar]
loss_hparam = 1

[summary_image]
limit = 2
bbox = 1
iou = 1

[summary_histogram]
parameters = config/summary/histogram.txt

[hparam]
foreground = 5
background = 1
center = 1
size = 1
cls = 1

[detect]
threshold = 0.3
threshold_cls = 0.005
overlap = 0.45

[eval]
phase = test
secs = 12 * 60 * 60
first = 0
iou = 0.5
db = eval.json
mapper = config/eval.py
debug = 0
metric07 = 1
